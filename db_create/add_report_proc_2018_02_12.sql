
/**
 * Author:  altmf
 * Created: 12.02.2018
 */
--#SET TERMINATOR @
CREATE OR REPLACE FUNCTION MAKPSB.PR_ADD_NEW_REPORT (IN PVISIBLE_NAME TEXT, IN PPATH  VARCHAR(1023),
                                                      IN PCLASS_NAME  VARCHAR(1023), IN PCODE  VARCHAR(255),
                                                      OUT ORESULT VARCHAR(511))
    returns VARCHAR as
$$
DECLARE VIS_DELETED INT; VCOUNT_RESOURCE INT;
     VID_RESOURCE BIGINT;
BEGIN

 VIS_DELETED := 0;

 VCOUNT_RESOURCE := (SELECT COUNT(*) FROM MAKPSB.RESOURCE
                       WHERE CODE = PCODE);

IF VCOUNT_RESOURCE = 0 THEN
INSERT INTO MAKPSB.RESOURCE (IS_DELETED, NAME, PATH, CODE)
VALUES (VIS_DELETED, PVISIBLE_NAME, PPATH, PCODE);
END IF;

VID_RESOURCE := (SELECT ID
                    FROM MAKPSB.RESOURCE
                    WHERE CODE = PCODE
                        FETCH FIRST 1 ROWS ONLY);

INSERT INTO MAKPSB.REPORT_INFO (IS_DELETED, VISIBLE_NAME, PATH, CLASS_NAME, CODE, ID_RESOURCE)
VALUES (VIS_DELETED, PVISIBLE_NAME, PPATH, PCLASS_NAME, PCODE, VID_RESOURCE);
    return ;
end $$ LANGUAGE 'plpgsql';

-- ПРИМЕР ИСПОЛЬЗОВАНИЯ:
-- begin
-- declare ORESULT VARCHAR(511);
-- call MAKPSB.PR_ADD_NEW_REPORT('Тест', 'Тест1', 'Тест2', 'TEST_CODE', ORESULT);
-- end
-- @
CREATE OR REPLACE FUNCTION MAKPSB.PR_ADD_CVITANTION (IN PROLE_CODE VARCHAR(511), IN POPERATION  VARCHAR(4),
                                                      IN PRESOURCE_CODE  VARCHAR(255),
                                                      OUT ORESULT VARCHAR(511))
    returns VARCHAR as
$$
DECLARE VIS_DELETED INT;
 VID_RESOURCE BIGINT;
 VID_ROLE BIGINT;
BEGIN
 VIS_DELETED := 0;

 VID_RESOURCE := (SELECT ID FROM MAKPSB.RESOURCE
                    WHERE CODE = PRESOURCE_CODE
                        FETCH FIRST 1 ROWS ONLY
);
 VID_ROLE := (SELECT ID FROM MAKPSB.ROLE
                WHERE CODE = PROLE_CODE
                    FETCH FIRST 1 ROWS ONLY
);
INSERT INTO MAKPSB.CVITANTION (IS_DELETED, OPERATION, ID_RESOURCE, ID_ROLE)
VALUES (VIS_DELETED, POPERATION, VID_RESOURCE, VID_ROLE);
return ;
end $$ LANGUAGE 'plpgsql';
;
-- ПРИМЕР ИСПОЛЬЗОВАНИЯ:
-- begin
-- declare ORESULT VARCHAR(511);
-- call MAKPSB.PR_ADD_CVITANTION('VIPL', 'O', 'TEST_CODE', ORESULT);
-- end

CREATE OR REPLACE FUNCTION MAKPSB.FN_COUNT_ROLE(PROLE_CODE VARCHAR(511))
    RETURNS INT as
$$
BEGIN
   RETURN (SELECT COUNT(*) FROM MAKPSB.ROLE
                   WHERE CODE = PROLE_CODE
    );
END $$ LANGUAGE 'plpgsql'
;
CREATE OR REPLACE FUNCTION MAKPSB.FN_COUNT_RESOURCE(PRESOURCE_CODE VARCHAR(255))
    RETURNS INT as
$$
BEGIN
    RETURN  (SELECT COUNT(*) FROM MAKPSB.RESOURCE
                  WHERE CODE = PRESOURCE_CODE
   );
END $$ LANGUAGE 'plpgsql'
;
CREATE OR REPLACE FUNCTION MAKPSB.PR_ADD_IF_NOT_EXISTS_NEW_REPORT_AND_CVITANTION(
    IN PVISIBLE_NAME    TEXT,
    IN PPATH            VARCHAR(1023),
    IN PCLASS_NAME      VARCHAR(1023),
    IN PROLE_CODE       VARCHAR(511),
    IN POPERATION       VARCHAR(4),
    IN PRESOURCE_CODE   VARCHAR(255),
    OUT ORESULT         VARCHAR(511)
)     returns VARCHAR as
$$
DECLARE VCOUNT_VID_RESOURCE INT;
 VCOUNT_VID_ROLE INT;
 ORESULT VARCHAR(511);
BEGIN
 VCOUNT_VID_RESOURCE := MAKPSB.FN_COUNT_RESOURCE(PRESOURCE_CODE);
 VCOUNT_VID_ROLE := MAKPSB.FN_COUNT_ROLE(PROLE_CODE);

IF (VCOUNT_VID_RESOURCE = 0 ) THEN
        CALL MAKPSB.PR_ADD_NEW_REPORT(PVISIBLE_NAME, PPATH, PCLASS_NAME, PRESOURCE_CODE, ORESULT);
END IF;

IF (VCOUNT_VID_ROLE = 0 ) THEN
 ORESULT := 'NO FIND ROLE';
END IF;

 VCOUNT_VID_RESOURCE := MAKPSB.FN_COUNT_RESOURCE(PRESOURCE_CODE);

IF (VCOUNT_VID_RESOURCE <> 0 AND VCOUNT_VID_ROLE <> 0) THEN
        CALL MAKPSB.PR_ADD_CVITANTION(PROLE_CODE, POPERATION, PRESOURCE_CODE, ORESULT);
 ORESULT := 'SUCCESS ADDED ROLE';
END IF;
 return ;
END $$ LANGUAGE 'plpgsql'
;
--example:
-- begin
-- declare ORESULT VARCHAR(511);
-- call MAKPSB.PR_ADD_IF_NOT_EXISTS_NEW_REPORT_AND_CVITANTION('Видимое имя', 'Путь сервлета', 'Имя класса','VIPL', 'E', 'TEST_CODE_NEW', ORESULT);
-- end
--check:
-- SELECT * FROM MAKPSB.RESOURCE FETCH FIRST 5300 ROWS ONLY;
-- SELECT * FROM MAKPSB.REPORT_INFO FETCH FIRST 5300 ROWS ONLY;
-- SELECT * FROM MAKPSB.CVITANTION FETCH FIRST 5300 ROWS ONLY;
;